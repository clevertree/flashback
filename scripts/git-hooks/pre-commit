#!/bin/bash

# Git Pre-Commit Hook
# Runs unit tests and builds to ensure no broken commits
# This hook prevents committing code that doesn't build or pass tests

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo -e "${BLUE}========================================${NC}"
echo -e "${BLUE}  Pre-Commit Build Verification${NC}"
echo -e "${BLUE}========================================${NC}"
echo ""

# Store the current directory
PROJECT_ROOT="$(git rev-parse --show-toplevel)"
cd "$PROJECT_ROOT"

# Track if any check failed
VERIFICATION_FAILED=0

# Step 1: Run Unit Tests (Jest)
echo -e "${YELLOW}[1/4]${NC} Running unit tests..."
echo ""

if npm run test -- --passWithNoTests > /tmp/jest-tests.log 2>&1; then
    echo -e "${GREEN}✓${NC} Unit tests passed"
    echo ""
else
    echo -e "${RED}✗${NC} Unit tests failed!"
    echo ""
    echo -e "${YELLOW}Test Output:${NC}"
    cat /tmp/jest-tests.log | tail -50
    echo ""
    VERIFICATION_FAILED=1
fi

# Step 2: Run Next.js Build
echo -e "${YELLOW}[2/4]${NC} Building Next.js application..."
echo ""

if npm run build > /tmp/nextjs-build.log 2>&1; then
    echo -e "${GREEN}✓${NC} Next.js build successful"
    echo ""
else
    echo -e "${RED}✗${NC} Next.js build failed!"
    echo ""
    echo -e "${YELLOW}Build Output:${NC}"
    cat /tmp/nextjs-build.log | tail -30
    echo ""
    VERIFICATION_FAILED=1
fi

# Step 3: Run Cargo Build
echo -e "${YELLOW}[3/4]${NC} Building Rust project..."
echo ""

if npm run tauri:build > /tmp/cargo-build.log 2>&1; then
    echo -e "${GREEN}✓${NC} Cargo build successful"
    echo ""
else
    echo -e "${RED}✗${NC} Cargo build failed!"
    echo ""
    echo -e "${YELLOW}Build Output:${NC}"
    tail -50 /tmp/cargo-build.log
    echo ""
    VERIFICATION_FAILED=1
fi

# Step 4: Run Cargo Tests
echo -e "${YELLOW}[4/4]${NC} Running Cargo tests..."
echo ""

if cargo test --lib > /tmp/cargo-tests.log 2>&1; then
    echo -e "${GREEN}✓${NC} Cargo tests passed"
    echo ""
else
    echo -e "${RED}✗${NC} Cargo tests failed!"
    echo ""
    echo -e "${YELLOW}Test Output (last 50 lines):${NC}"
    tail -50 /tmp/cargo-tests.log
    echo ""
    VERIFICATION_FAILED=1
fi

# Step 5: Run Go Chaincode Tests (if chaincode directory exists)
if [ -d "$PROJECT_ROOT/chaincode/movie" ]; then
    echo -e "${YELLOW}[5/5]${NC} Building and testing Go chaincode..."
    echo ""
    
    cd "$PROJECT_ROOT/chaincode/movie"
    
    if go build -o /tmp/movie-chaincode . > /tmp/go-build.log 2>&1; then
        echo -e "${GREEN}✓${NC} Go chaincode build successful"
        echo ""
    else
        echo -e "${RED}✗${NC} Go chaincode build failed!"
        echo ""
        echo -e "${YELLOW}Build Output:${NC}"
        cat /tmp/go-build.log
        echo ""
        VERIFICATION_FAILED=1
    fi
    
    # Run Go tests if they exist
    if [ -f "$PROJECT_ROOT/chaincode/movie/movie_test.go" ] || [ -f "$PROJECT_ROOT/chaincode/movie/models_test.go" ]; then
        if go test ./... -v > /tmp/go-tests.log 2>&1; then
            echo -e "${GREEN}✓${NC} Go chaincode tests passed"
            echo ""
        else
            echo -e "${RED}✗${NC} Go chaincode tests failed!"
            echo ""
            echo -e "${YELLOW}Test Output:${NC}"
            tail -30 /tmp/go-tests.log
            echo ""
            VERIFICATION_FAILED=1
        fi
    fi
    
    cd "$PROJECT_ROOT"
fi

# Summary
echo -e "${BLUE}========================================${NC}"

if [ $VERIFICATION_FAILED -eq 0 ]; then
    echo -e "${GREEN}✓ All tests passed!${NC}"
    echo -e "${GREEN}✓ All builds successful!${NC}"
    echo -e "${GREEN}✓ Commit allowed${NC}"
    echo -e "${BLUE}========================================${NC}"
    echo ""
    exit 0
else
    echo -e "${RED}✗ Verification failed!${NC}"
    echo -e "${RED}✗ Commit rejected${NC}"
    echo -e "${BLUE}========================================${NC}"
    echo ""
    echo -e "${YELLOW}To commit anyway, use:${NC}"
    echo "  git commit --no-verify"
    echo ""
    exit 1
fi
